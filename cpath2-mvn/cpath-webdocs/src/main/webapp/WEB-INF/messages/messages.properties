# locale: default (EN)

# example links text
cpath2.example.search1=search for "Q06609" keyword, no filters, return XML result
cpath2.example.search2=specific search for "Q06609" in the 'xrefid' index field, \
no filters, return XML (default)
cpath2.example.search3=search for "Q06609" keyword, no filters, return JSON result
cpath2.example.search4=search for Pathways containing "Q06609" (search all fields)\
, return JSON
cpath2.example.search5=search for ProteinReference containing "brca2" \
(case-insensitive) keyword (in any field), filter by organism (human) and \
datasource (NCI_Nature actually)
cpath2.example.search6=search for Control interactions matching "brca*" \
(wildcard, case-insensitive, in any field), originated from Reactome, Human
cpath2.example.search7=use of pagination: get the forth page (page=3) hits
cpath2.example.search8=search for Control interactions having something to \
do with "binding" but not "transcription" (gets the first page hits)
cpath2.example.search9=search for Conversion interactions that are direct or \
indirect participants of a "immune" (part of its name) pathway (cool!)

cpath2.example.get1=get a self-consistent BioPAX sub-model using \
URI=urn:miriam:uniprot:Q06609 (the ProteinReference and dependent objects)
cpath2.example.get2=get a Reactome "pathway" (normalized by the server, as usual)
cpath2.example.get3=get the NCI-Nature Curated BMP signaling pathway in SIF format

cpath2.example.graph1=from the protein's state
cpath2.example.graph2=from the protein reference, i.e., all its states (found in \
the BioPAX network(s) on the server)
cpath2.example.graph3=from the same protein reference but using a different output format

cpath2.example.traverse1=for a URI (of a ProteinReference), get the organism's display name
cpath2.example.traverse2=for each URI, get the organism (URI)
cpath2.example.traverse3=get names of all states of RAD51 protein (by its \
ProteinReference URI, using property path="ProteinReference/entityReferenceOf:Protein/name")
cpath2.example.traverse4=get URIs of states of BRCA1_HUMAN (path="ProteinReference/entityReferenceOf:Protein/")
cpath2.example.traverse5=get names of several different objects (using abstract type 'Named' from Paxtools API)
cpath2.example.traverse6=get BMP pathway participants's names (cool, but be careful and not too much excited!)

cpath2.example.top_pathways1=get top/root pathways (XML)
cpath2.example.top_pathways2=get top/root pathways (JSON)

cpath2.example.help0=/help
cpath2.example.help1=/help/commands
cpath2.example.help12=/help/commands.json
cpath2.example.help11=/help/commands/search
cpath2.example.help2=/help/types
cpath2.example.help3=/help/kinds
cpath2.example.help4=/help/organisms (note: some of species there listed are only due to they were mentioned in human, mouse, etc., pathway data)
cpath2.example.help9=/help/datasources (some of those data sources may be equivalent; this is due to some data provides use not standard names)
cpath2.example.help5=/help/directions
cpath2.example.help6=/help/types/properties
cpath2.example.help7=/help/types/provenance/properties
cpath2.example.help8=/help/types/inverse_properties


# header strings
cpath2.welcome=About Pathway Commons (BioPAX Level3)
cpath2.description=Pathway Commons is a convenient point of access to \
biological pathway information collected from public pathway databases.  \
This particular instance of Pathway Commons (cPathSquared) is for evaluating \
our new data import pipeline, which supports <a href="http://www.biopax.org">\
BioPAX</a> Level 3 and revised data storage and web services.  We have plans \
to provide batch downloads of all Pathway Commons data in the near future.
cpath2.license_terms=All data is freely available, under the license terms \
of each contributing database.
cpath2.feedback=Send us your feedback to pc-info *a-t* pathwaycommons.org
cpath2.web_service_title=Web Service API:
cpath2.web_service_sub_title=You can programmatically access the data within \
Pathway Commons using the Pathway Commons Web Service Application Programming \
Interface (API).  This page provides a reference guide to help you get started.

# miriam
cpath2.uri_title=Note about using URIs:
cpath2.uri_description=Some of web service commands require a parameter value \
to be valid URI, e.g., original data provider's URIs (usually for BioPAX \
Entities) or MIRIAM URNs (for some BioPAX UtilityClass objects, such as \
ProteinReference). <a href="http://www.ebi.ac.uk/miriam/main/">MIRIAM</a> \
is a set of guidelines for the annotation and curation of computational models. \
<a href="http://www.ebi.ac.uk/miriam/main/mdb?section=faq#MIRIAM_URIs">MIRAM \
URIs</a> provide a community-agreed means to create stable and perennial \
identifiers, which can be used for annotation.
cpath2.encoding_title=Note about URL-encoding (a browser issue):
cpath2.encoding_description=All HTTP GET query arguments, including URIs, must \
be URL-encoded, and this is, fortunately, done automatically when a standard \
client library is used; whereas, web browsers cannot do this properly. Normally\
, there is another layer, a web app or page, which takes care of building and \
sending proper http requests to the server, and users are not supposed to type \
a web service query with parameters in the browser's address line: although \
browsers can replace spaces with "%20", they will not encode. e.g., \
"?uri=urn:biopax:RelationshipXref:HGNC_HGNC%3A13101" query (- to replace % with %25!) \
URIs are case-sensitive!
# some generic command  header strings
cpath2.command_header_summary=Summary:
cpath2.command_header_parameters=Parameters:
cpath2.command_header_datasource_parameter=<em>datasource=</em> [Optional] data source \
filter (<a href="#available_datasource_parameter">example values</a>). Multiple \
data source values are allowed per query; for example, datasource=reactome&\
datasource=pid means: dataSource should be "reactome" OR "pid" (actually \
urn:miriam:reactome OR urn:miriam:pid.pathway)
cpath2.command_header_organism_parameter=<em>organism=</em> [Optional] organism filter \
(<a href="#available_organism_parameter">example values</a>).  Multiple \
organisms are allowed per query; for example 'organism=9606&organism=10016' \
(which means "homo sapiens" OR "mus musculus").
cpath2.command_header_biopax_class_parameter=<em>type=</em> [Optional] BioPAX class \
filter (<a href="#available_biopax_parameter">values</a>)
cpath2.command_header_format_parameter=<em>format=</em> [Optional] output format \
(<a href="#available_output_parameter">values</a>)
cpath2.command_header_output=Output:
cpath2.command_header_query=Example Queries:

# 'search' command strings
cpath2.command_header_search=Command: SEARCH
cpath2.command_search_summary=Full text search in Pathway Commons \
using keywords, phrases, a Lucene query. For example, find records \
that contain the keyword "BRCA2" (in any index field), or, more specifically, \
- "BRCA2" in a Protein's 'name' (index) field. BioPAX entity or utility \
class hits that match the search criteria and pass filters are ranked and returned. \
Search (index) field names are (case-sensitive): comment, ecnumber, keyword, \
name, pathway, term, xrefdb, xrefid, dataSource, and organism. The latter \
two were introduced mainly for filtering as un_tockenized, no \
wildcard/fuzzy support. (Note: index fields are not exactly BioPAX properties!) \
To search within a specific BioPAX class only, \
use the 'type' parameter (filter). Full-text search is a very powerful feature \
and can save a lot of time, but it's not a replacement for a more accurate \
BioPAX graph analysis, i.e., - using other web service commands (see below), \
following official BioPAX semantics. (The more "advanced" search query is the \
more cool but uncertain/error-prone result is.) 
cpath2.command_search_query_parameter=<em>q=</em> [Required] a keyword, name, external \
identifier, or a search string (Lucene syntax).
cpath2.command_search_page_parameter=<em>page=N</em> [Optional] (N>=0, default is 0), \
search result page number.  See below ("Output" section) for details.
cpath2.command_search_response_schema=Search Response XML Schema
cpath2.command_search_output1=XML result that follows the 
cpath2.command_search_output2=. JSON is returned by appending .json to the \
query URL.  The server returns up to 'numHitsPerPage' search hits per request \
(configured on the server).  But you can request hits beyond the first N, if \
any, using the 'page' parameter.  The 'numHits' attribute in the returned XML \
or JSON contains the total number of search results that matched the query and \
filters. If a page is requested beyond the total number of results, "empty \
result" error xml is returned. In other words, when numHits > numHitsPerPage \
hits, 'page=n' (n>=0) parameter is to get hits ranked from numHitsPerPage*n to \
numHitsPerPage*(n+1)-1. Total no. pages can be also calculated as<br/> \
INT[(numHits-1)/numHitsPerPage+1].

# 'get' command strings
cpath2.command_header_get=Command: GET
cpath2.command_get_summary=Retrieves details regarding one or more records, \
such as pathway, interaction or physical entity.  For example, get the complete \
Apoptosis pathway from Reactome.
cpath2.command_get_uri_parameter=<em>uri=</em> [Required]  a BioPAX element ID (RDF ID; \
for utility classes that have been "normalized", such as xrefs, entity \
refereneces and controlled vocabularies, it is usually a MIRIAM URN.  Multiple \
IDs are allowed per query, for example 'uri=urn:miriam:uniprot:Q06609&uri=urn:miriam:uniprot:Q549Z0'.\
  See <a href="#miriam">a note about MIRIAM</a>.
cpath2.command_get_output=By default, a complete BioPAX representation for the \
record pointed to by the given uri.  Other output formats are available as \
specified by the optional format parameter.  Please be advised that not all \
output formats are relevant for this web service.  For example, it would not \
make sense to request BINARY_SIF output when the given URI points to a protein.

# 'graph' command strings
cpath2.command_header_graph=Command: GRAPH
cpath2.command_graph_summary=We implemented several graph theoretic algorithms \
that take BioPAX data model into account, such as shortest path between two proteins. \
This command executes one of graph queries based on the integrated BioPAX network \
stored on our server. For example, get the neighborhood for a particular BRCA1 \
protein state or all states. As the original BioPAX data and our import pipeline \
quality improves, graph query results also become more interesting and connected. \
We merge BioPAX data based on our proteins and small molecules data warehouse and \
consistently normalized UnificationXref, EntityReference, Provenance, BioSource, \
and ControlledVocabulary objects when we are absolutely sure two objects of the \
same type are equivalent. By favoring to store unmodified original data when in \
doubt, we try NOT to accidently introduce any artifacts or noise to this process \
and thus limit our users's options in the future. Having said that, the really \
good thing is that anyone (including our team) is free and encouraged to \
independently develop a dedicated web service client app, which, e.g., would \
use a combination of an advanced id-mapping tool, our basic search and query services, and \
any other advanced network merge algorithm of ones choice.
cpath2.command_graph_kind_parameter=<em>kind=</em> [Required] graph query (<a href="#available_graph_parameter">values</a>)
cpath2.command_graph_direction_parameter=<em>direction=</em> [Optional, for NEIGHBORHOOD \
and COMMONSTREAM] - graph search direction (<a href="#available_direction_parameter">values</a>).
cpath2.command_graph_source_parameter=<em>source=</em> [Required] source URI as specified \
as a MIRIAM URI.  Multiple source URIs are allowed per query, for example \
'source=uri=urn:miriam:uniprot:Q06609&source=uri=urn:miriam:uniprot:Q549Z0'. See <a href="#miriam">a note about MIRIAM</a>.
cpath2.command_graph_target_parameter=<em>target=</em> [Required for PATHSFROMTO graph \
query] target URI as specified as a MIRIAM URI.  Multiple target URIs are \
allowed per query; for example  'target=uri=urn:miriam:uniprot:Q06609&target=uri=urn:miriam:uniprot:Q549Z0'.  \
See <a href="#miriam">a note about MIRIAM</a>.
cpath2.command_graph_output=By default, a complete BioPAX representation of the \
desired graph query.  Other output formats are available as specified by the \
optional format parameter.  Please be advised that not all output formats are \
relevant for this web service.  For example, it would not make sense to request \
BINARY_SIF output when the given uri points to a protein.
cpath2.command_graph_limit_parameter=<em>limit=</em> [Optional] graph query search distance \
limit (default = 1).
cpath2.command_header_graph_query_description= Neighborhood of Col5a1 (O88207, CO5A1_MOUSE): 

# 'traverse' command strings
cpath2.command_header_traverse=Command: TRAVERSE
cpath2.command_traverse_summary=Get BioPAX data property values \
or objects (URIs) using a XPath-like property path expression. This command has two parameters. 
cpath2.command_traverse_uri_param=<em>uri=</em> [Required] a BioPAX element ID (it's like \
for <a href="#get">'GET' command above</a>). Multiple IDs are allowed (uri=...&uri=...&uri=...).
cpath2.command_traverse_path_param=<em>path=</em> [Required] a BioPAX propery path: like \
property1[:type1]/property2[:type2]; can also include convenient (unofficial) \
inverse BioPAX properties, such as xrefOf, componentOf, etc., and abstract types, \
such as Named, XReferrable, Process, etc.; see <a href="#available_properties_parameter">properties</a>, \
<a href="#available_inverse_properties_parameter">inverse properties</a>, \
<a href="http://www.biopax.org/paxtools">Paxtools</a>, org.biopax.paxtools.controller.PathAccessor.
cpath2.command_header_traverse_query_description=
cpath2.command_traverse_output2=&nbsp;(TraverseResponse type; pagination is disabled: returns all values at once)

# 'top_pathways' command strings
cpath2.command_header_tp=Command: TOP_PATHWAYS
cpath2.command_tp_summary=Retrieves all "top" pathways (- not exactly in the \
graph-theoretic sense, but - all such pathways that are neither 'controlled' \
nor 'pathwayComponent' of other processes)
cpath2.command_tp_output2=&nbsp;(SearchResponse type; pagination is disabled: \
returns all pathways at once)


# 'help' command strings
cpath2.command_header_help=Command: HELP
cpath2.command_help_summary=Finally, this is a RESTful web service, which returns both \
static and instance-specific information, some of which helped create this demo page \
(- the list of types, constants, organisms, and data sources below)
cpath2.command_help_output=XML/JSON (if '.json' suffix used) element 'Help' (nested tree); see: 

# additional parameters strings
cpath2.command_header_additional_parameters=Values specific to this web service instance
cpath2.command_header_additional_parameters_graph=Built-in graph queries ('kind'):
cpath2.command_header_additional_parameters_graph_desc=
cpath2.command_header_additional_parameters_direction=Graph traversal directions ('direction'):
cpath2.command_header_additional_parameters_direction_desc=
cpath2.command_header_additional_parameters_output=Output formats ('format'):
cpath2.command_header_additional_parameters_output_desc=See \
<a href="resources/docs/README.txt">README.txt</a> for more information \
regarding these format parameters.
cpath2.command_header_additional_parameters_datasource=Loaded Data Sources ('dataSource'):
cpath2.command_header_additional_parameters_datasource_desc=The given MIRIAM \
URN or data source name are valid.  For example 'urn:miriam:reactome' or \
'reactome' are both valid data source filter parameters
cpath2.command_header_additional_parameters_biopax=BioPAX classes ('type'):
cpath2.command_header_additional_parameters_biopax_desc=
cpath2.command_header_additional_parameters_organism=Loaded Species ('organism'):
cpath2.command_header_additional_parameters_organism_desc=MIRIAM URN; \
Taxonomy identifier; official species names: '10090', \
'mus musculus' - should be ok for filtering (but, e.g., 'mus' or 'homo*' are not). \
Note: not all listed here organisms's pathway data were imported to our database; \
some of these may appear in the list simply because they can be found in other species \
BioPAX pathways (e.g., linked to a human or mouse proteins/interactions via 'evidence' \
or by a mistake)
cpath2.command_header_additional_parameters_properties=Official BioPAX \
Properties and Domain/Range Restrictions
cpath2.command_header_additional_parameters_properties_desc=Note: \
"XReferrable xref Xref D:ControlledVocabulary=UnificationXref \
D:Provenance=UnificationXref,PublicationXref" means XReferrable.xref, \
and that, for a ControlledVocabulary.xref, the value can only be of UnificationXref type, etc.
cpath2.command_header_additional_parameters_inverse_properties=Inverse BioPAX \
Object Properties and Domain/Range Restrictions (useful feature of Paxtools API)
cpath2.command_header_additional_parameters_inverse_properties_desc=Note: Some \
of object range BioPAX properties can be reversed/inversed (and also used in \
the '/traverse?path=' context), e.g, 'xref' - 'xrefOf'. These are listed below\
. But, e.g., unlike the normal xref property, the same restriction ("XReferrable \
xref Xref D:ControlledVocabulary=UnificationXref D:Provenance=UnificationXref,\
PublicationXref") must read/comprehend differently: it's actually now means \
Xref.xrefOf, and that RelationshipXref.xrefOf cannot contain a \
ControlledVocabulary (or its sub-class) values, etc.

# error codes
cpath2.error_code_header=Error Codes
cpath2.error_code_description=An error while processing a request is reported \
as an XML document (ErrorResponse) with information about the error cause as defined in the 
cpath2.error_code_footnote=Only the first error encountered is reported.  \
The table below provides a list of error codes, with their descriptions.
cpath2.error_code_label=Error Code
cpath2.error_code_description_label=Error Description
cpath2.error_code_450=450
cpath2.error_code_450_description=Bad Command (command not recognized)
cpath2.error_code_452=452
cpath2.error_code_452_description=Bad Request (missing arguments)
cpath2.error_code_460=460
cpath2.error_code_460_description=No Results Found
cpath2.error_code_500=500
cpath2.error_code_500_description=Internal Server Error

# footer strings
cpath2.footer_text1=Pathway Commons is built and maintained by
cpath2.footer_text2=and the
cpath2.mskcc=Memorial Sloan-Kettering Cancer Center
cpath2.UofT=University of Toronto