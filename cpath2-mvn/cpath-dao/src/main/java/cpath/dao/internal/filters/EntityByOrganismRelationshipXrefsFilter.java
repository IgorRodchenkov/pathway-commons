package cpath.dao.internal.filters;

import java.util.Set;

import org.biopax.paxtools.controller.ModelUtils;
import org.biopax.paxtools.controller.ModelUtils.RelationshipType;
import org.biopax.paxtools.model.level3.ControlledVocabulary;
import org.biopax.paxtools.model.level3.Dna;
import org.biopax.paxtools.model.level3.DnaRegion;
import org.biopax.paxtools.model.level3.Protein;
import org.biopax.paxtools.model.level3.Entity;
import org.biopax.paxtools.model.level3.RelationshipXref;
import org.biopax.paxtools.model.level3.Xref;
import org.biopax.paxtools.util.ClassFilterSet;

import cpath.dao.filters.SearchFilterRange;


/**
 * Defines a filter by organism for entities,
 * i.e.: {@link Protein},  {@link Dna}, {@link DnaRegion}, etc.
 * This filter uses organism relationship xrefs auto-generated by 
 * the BioPAX normalizer.
 * 
 * 
 * @author rodche
 *
 */
@SearchFilterRange(Entity.class)
public class EntityByOrganismRelationshipXrefsFilter 
	extends SearchFilterAdapter<Entity, String> 
{

	public EntityByOrganismRelationshipXrefsFilter() {
		super(Entity.class);
	}
	
	@Override
	public boolean apply(Entity searchResult) {
		// use relationship xrefs with rel. CV "ORGANISM"; compare 'id' vs. the list of filter values
		if(values.isEmpty())
			return true;
		
		Set<RelationshipXref> rxrefs = new ClassFilterSet<Xref, RelationshipXref>(
				searchResult.getXref(), RelationshipXref.class);
		for(RelationshipXref rx : rxrefs) {
			ControlledVocabulary rcv = rx.getRelationshipType();
			if(rcv != null 
				&& rcv.getTerm().contains(RelationshipType.ORGANISM.name())
				&& this.values.contains(rx.getId())) // by design, the value is a BioSource URI (RDF ID) 
			{
				assert ModelUtils.COMMENT_FOR_GENERATED.equals(rx.getDb()) : "Only rel. xrefs auto-generated "
					+ "by the normalizer can be used in this filter implementation. Such rel. xrefs have "
					+ " property db=" + ModelUtils.COMMENT_FOR_GENERATED + ", and id - URI of the corresponding "
					+ "BioSource object in the same model.";
				return true;
			}
		}
		
		return false;
	}

}
